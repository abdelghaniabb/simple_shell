/**
 * change_directory - change current working directory
 * @tokens: list of command arguments
 * Return: 0 on success, -1 on error
 */
/*
int change_directory(char **tokens)
{
	char *new_path = NULL;

	if (tokens[1] == NULL || _strcmp(tokens[1], "~") == 0)
		new_path = _getenv("HOME");
	else if (_strcmp(tokens[1], "-") == 0)
	{
		new_path = _getenv("OLDPWD");
		write(STDOUT_FILENO, new_path, _strlen(new_path));
		write(STDOUT_FILENO, "\n", 1);
	}
	else
		new_path = tokens[1];

	if (new_path == NULL)
	{
		perror("cd");
		return (-1);
	}

	if (chdir(new_path) != 0)
	{
		perror("cd");
		return (-1);
	}

	setenv("OLDPWD", _getenv("PWD"), 1);
	setenv("PWD", getcwd(NULL, 0), 1);

	return (0);
}

/**
  * main - entry point to shell
  * @argc: arg number
  * @av: arg value
  * Return: -1 | 1
  */
  /*
char *trim_whitespace(char *str)
{
	char *end;

	while (is_whitespace(str))
		str++;

	if (*str == 0)
		return str;

	end = str + _strlen(str) - 1;
	while (end > str && is_whitespace(end))
		end--;

	*(end + 1) = 0;

	return str;
}
int main(int __attribute__((unused)) argc, char *av[])
{
    char *buffer = NULL, *path_env, *path, **tokens, st = 0;
    size_t buf_s = 0;
    int flag = 0, len = 0;
    char *saveptr;
    char *cmd = strtok_r(buffer, ";", &saveptr);
    

    while (1)
    {
        if (isatty(0))
            write(STDOUT_FILENO, "#meisfun$ ", 9);
        len = getline(&buffer, &buf_s, stdin);
        if (len == -1)
            free(buffer), exit(0);
        if (len == EOF)
            _EOF(buffer);
        if (*buffer == '\n')
        {
            free(buffer);
            continue;
        }

        /* Split the input by ';' into separate commands
        char *saveptr;
        char *cmd = strtok_r(buffer, ";", &saveptr);*/
    /*    while (cmd != NULL)
        {
            /* Remove leading and trailing whitespace from the command*/
      /*      cmd = trim_whitespace(cmd);
            if (strlen(cmd) > 0)
            {
                tokens = make_tokens(cmd);
                if (_strcmp(tokens[0], "exit") == 0)
                {
                    
                    free(buffer), free(tokens), exit(st);
                    
		}
                if (_strcmp(tokens[0], "env") == 0)
                {
                    free(tokens), print_env();
                    continue;
                }
                if (_strcmp(tokens[0], "cd") == 0)
                {
                    if (tokens[1] == NULL)
                    {
                        chdir(getenv("HOME"));
                        setenv("PWD", getenv("HOME"), 1);
                    }
                    else if (_strcmp(tokens[1], "-") == 0)
                    {
                        chdir(getenv("OLDPWD"));
                        setenv("PWD", getenv("OLDPWD"), 1);
                        printf("%s\n", getenv("PWD"));
                    }
                    else if (_strcmp(tokens[0], "cd") == 0)
                    {
                        if (change_directory(tokens) == -1)
                            st = 2;
                        continue;
                    }
                    else
                    {
                        if (chdir(tokens[1]) != 0)
                            perror("hsh");
                        else
                        {
                            setenv("OLDPWD", getenv("PWD"), 1);
                            setenv("PWD", getcwd(NULL, 0), 1);
                        }
                    }
                    free(tokens);
                    continue;
                }
                path_env = _getenv("PATH"), path = search_command(tokens[0], path, path_env);
                if (path == NULL)
                    path = tokens[0];
                else
                    flag = 1;
                st = execute_cmd(tokens, av[0], path), free(tokens);
                if (flag == 1)
                    free(path);
            }
            /* Get the next command*/
    /*        cmd = strtok_r(NULL, ";", &saveptr);
        }

        free(buffer);
        buffer = NULL;
        buf_s = 0;
    }
    return (0);
}
*/
/* add cd*/
/*
int main(int __attribute__((unused)) argc, char *av[])
{
	char *buffer = NULL, *path_env, *path, **tokens, st = 0;
	size_t buf_s = 0;
	int flag = 0, len = 0;

	while (1)
	{
		if (isatty(0))
			write(STDOUT_FILENO, "#meisfun$ ", 9);
		len = getline(&buffer, &buf_s, stdin);
		if (len == -1)
			free(buffer), exit(0);
		if (len == EOF)
			_EOF(buffer);
		if (*buffer == '\n')
		{
			free(buffer);
			continue;
		}
		buffer[len - 1] = '\0';
		if (is_whitespace(buffer) == 1)
			continue;
		tokens = make_tokens(buffer);
		if (_strcmp(tokens[0], "exit") == 0)
			free(buffer), free(tokens), exit(st);
		if (_strcmp(tokens[0], "env") == 0)
		{
			free(tokens), print_env();
			continue;
		}
		if (_strcmp(tokens[0], "cd") == 0)
		{
			if (tokens[1] == NULL)
			{
				chdir(getenv("HOME"));
				setenv("PWD", getenv("HOME"), 1);
			}
			else if (_strcmp(tokens[1], "-") == 0)
			{
				chdir(getenv("OLDPWD"));
				setenv("PWD", getenv("OLDPWD"), 1);
				printf("%s\n", getenv("PWD"));
			}
			else
			{
				if (change_directory(tokens) == -1)
					st = 2;
				continue;
			}
			free(buffer), buffer = NULL, buf_s = 0, free(tokens);
			continue;
		}
		path_env = _getenv("PATH"), path = search_command(tokens[0], path, path_env);
		if (path == NULL)
			path = tokens[0];
		else
			flag = 1;
		st = execute_cmd(tokens, av[0], path), free(buffer);
		buffer = NULL, buf_s = 0, free(tokens);
		if (flag == 1)
			free(path);

	}
	return (0);
}
*/
